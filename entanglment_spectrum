#%%
import numpy as np
import math
import matplotlib.pyplot as plt
from itertools import permutations, combinations
from scipy.linalg import block_diag,dft,expm
import scipy
from tqdm import tqdm

from IQH_state import *

# Class that deals with with multi_particle_state with @N sites and @n electrons
# in first quantization(!)
class Multi_particle_state_first_q:
    def __init__(self, N, n):
        objects = np.arange(N)
        perms = list((permutations(objects, n)))
        index_2_perm_list = perms
        index = range(len(perms))
        perm_2_index_dict =  {k: o for k, o in zip(perms, index)}
        self.N = N
        self.n = n
        self.perms = perms
        self.perm_2_index_dict = perm_2_index_dict
        self.index_2_perm_list = index_2_perm_list
        self.len = len(self.index_2_perm_list)
        
# Creats a vectors of zeros in the size of a multi particle state
    def zero_vector(self):
        multi_particle_state_vector = np.zeros((len(self.index_2_perm_list)), dtype = complex)
        return multi_particle_state_vector

# Tranlate index to permutation
    def index_2_perm(self, index):
        return self.index_2_perm_list[index]

# Translate permutation to index in the multi paticle state vector
    def perm_2_index(self, perm):
        return self.perm_2_index_dict[tuple(perm)]

# Create a reduced density matrix rho_a from a [second quantization] @state
# of @n electron on @N cites reduced with particle partitioned 
# with @na electrons
def build_rho_a(state, N, n, na):
    nb = n - na
    state = np.array(state) / np.sqrt(math.factorial(n))
    mps = Multi_particle_state_first_q(N, na)
    mps_full = Multi_particle_state(N, n)
    rho = np.zeros(shape=(mps.len,mps.len), dtype=np.complex128)

    for row_index in tqdm(range(mps.len)):
        for col_index in range(mps.len):
            row_perm = mps.index_2_perm(row_index)
            col_perm = mps.index_2_perm(col_index)
            
            # tracing out the last nb = n - na electrons:
            perm_b_row = set(permutations([x for x in range(N) if x not in row_perm], nb))
            perm_b_col = set(permutations([x for x in range(N) if x not in col_perm], nb))
            common_elements = perm_b_row & perm_b_col
            if len(common_elements) > 0:
                for perm_b in common_elements:

                    full_row_perm = tuple(list(row_perm) + list(perm_b))
                    row_parity, row_soreted_perm =  permutation_parity(full_row_perm, return_sorted_array=True)
                    row_full_index = mps_full.perm_2_index(row_soreted_perm)
                    
                    full_col_perm = tuple(list(col_perm) + list(perm_b))
                    col_parity, col_soreted_perm =  permutation_parity(full_col_perm, return_sorted_array=True)
                    col_full_index = mps_full.perm_2_index(col_soreted_perm)
                    rho[row_index, col_index] +=  state[row_full_index] * state[col_full_index].conjugate() * (-1) **  (row_parity + col_parity)

    return rho

# compute the entanglement_entropy of a [second quantization] @state
# of @n electron on @N cites reduced with particle partitioned 
# with @na electrons
def entanglement_entropy(state, N, n, na):
    rho = build_rho_a(state, N, n, na)
    eigval = np.linalg.eigvalsh(rho)
    non_zero_eigval = eigval[np.abs(eigval) > 1e-12]
    plt.plot(np.ones(len(non_zero_eigval)), -np.log(non_zero_eigval), ".")
    print(non_zero_eigval)
    S = - np.sum(non_zero_eigval * np.log(non_zero_eigval))
    return S


#%%
N = 3
n = 6
na = 1

a1 = 1
a2 = 2
state = normalize(np.array([a1,0,a2]))
a1 = state[0]
a2 = state[2]

rho = build_rho_a(state,N,n,na)
print(rho)

print("-------------")
analytic = np.array([[np.abs(a1)**2 / 2, 0, -a1 * a2.conjugate() / 2],
                    [0,                 1/2,  0],
                    [-a1.conjugate()*a2 / 2, 0,   np.abs(a2)**2 / 2]])

print(analytic)

print(np.sum(np.abs(rho - rho.T.conjugate())))
print(np.sum(np.abs(rho - analytic)))


#%%
Nx = 2
Ny = 6

N = 2 * Nx * Ny
n = N // 6
na = 1

# FF_state, mps =  create_IQH_in_extendend_lattice(Nx,Ny,n,extention_factor = 1, band_energy = 1, H_sb = None)
# S_F = entanglement_entropy(state = FF_state, N = N, n = n, na = na)
S_F = np.log(math.factorial(n) / math.factorial(na) / math.factorial(n - na))
print(f"S_F = {S_F}")

loaded2 = np.load(f'data/states/Nx-{Nx}_Ny-{Ny}_k-4.npz')
eigenvectors = loaded2['a']
# S_int = entanglement_entropy(state = eigenvectors[:,0], N = N, n = n, na = na)
# S_int = entanglement_entropy(state = loaded, N = N, n = n, na = na)
print(f"S_int = {S_int}")

print(f"S_int - S_F = {S_int - S_F}")
